import java.util.*;

public class BigInt {
	private ArrayList<Integer> digits;
	private static int sign = 1;
	private boolean neg = false;
	
	public BigInt(String number) throws Exception {
		digits = new ArrayList<Integer>();
		for (int i = 0; i < number.length(); ++i) {
			char c = number.charAt(i);
			
			if (i==0 && c=='-') {
				neg = true;
				++i;
				c = number.charAt(i);
			}

			if (!(Character.isDigit(c))) { // !(Character.parseInt(number)) or c
											// < '0' || c > '9'
				throw new Exception("incorrect BigInt: " + number);
			}
			digits.add(c - '0');
			// digits.add(Integer.parseInt(substring(i, i+1)));
		}
	}

	public BigInt(String number, int sign) throws Exception {
		this.sign = sign;
		digits = new ArrayList<Integer>();
		for (int i = 0; i < number.length(); ++i) {
			char c = number.charAt(i);
			if (!(Character.isDigit(c))) { // !(Character.parseInt(number)) or c
											// < '0' || c > '9'
				throw new Exception("incorrect BigInt: " + number);
			}
			digits.add(c - '0');
			// digits.add(Integer.parseInt(substring(i, i+1)));
		}
	}
	
	@Override
	public String toString() {
		StringBuilder r = new StringBuilder();
		for (int i = 0; i<digits.size(); ++i) {
			if (i==0) r.append(digits.get(i) * sign);
			else 	  r.append(digits.get(i));
		}
		return r.toString();
	}

	private BigInt addition(BigInt other) throws Exception {
		BigInt r = new BigInt("0");
		r.digits.remove(0);

		int i = digits.size() - 1;
		int j = other.digits.size() - 1;

		int carry = 0;
		while (i > -1 || j > -1 || carry != 0) {
			int s = carry;
			if (i > -1) {
				s += digits.get(i);
				--i;
			}
			if (j > -1) {
				s += other.digits.get(j);
				--j;
			}
			carry = s / 10;
			int d = s % 10;
			r.digits.add(0, d);
		}
		return r;
	}

	private BigInt substraction(BigInt other) throws Exception {
		BigInt r = new BigInt("0");
		r.digits.remove(0);

		int i = digits.size() - 1;
		int j = other.digits.size() - 1;

		int carry = 0;
		while (i > -1 || j > -1 || carry != 0) {
			int s = 0;
			if (i > -1) { 
				s += digits.get(i) -  carry;
				--i;
			}
			if (j > -1) {
				s -= other.digits.get(j);
				--j;
			}
			if (s<0) {
				s += 10;
				carry=1;
			} else carry = 0;
			
			int d = s % 10;
			r.digits.add(0, d); 
		}
		while (r.digits.get(0) == 0 && r.digits.size() > 1) {
			r.digits.remove(0);
		}
		return r;
	}

	private int comparison(BigInt other) throws Exception {
		int i = 0;
		int r = 0;

		if (digits.size() > other.digits.size()) {
			r = 1;
		} else if (digits.size() < other.digits.size()) {
			r = -1;
		} else if (digits.size() == other.digits.size()) {
			while (true) {
				if (digits.get(i) > other.digits.get(i)) {
					r = 1;
					break;
				} else if (digits.get(i) < other.digits.get(i)) {
					r = -1;
					break;
				} else if (digits.get(i) == other.digits.get(i)) {
					r = 0;
					break;
				}
				++i;
			}
		}
		return r;
	}

	private BigInt multiplication(BigInt other) throws Exception {
		BigInt r = new BigInt("0");
		r.digits.remove(0);

		int i = digits.size() - 1;
		int j = other.digits.size() - 1;
		int c = 0;
		
		while (j > -1 ) {
			BigInt asd = new BigInt("0");
			asd.digits.remove(0);
			int carry = 0;
			
			for (int k = 0; k<c; ++k) {
				asd.digits.add(0, 0);
			}
			
			while (i > -1 ) {
				int s = 1;

				if (i > -1) {
					s = digits.get(i) * other.digits.get(j);
					--i;
				}
				
				s+=carry;
				carry = s / 10;
				int d = s % 10;
				asd.digits.add(0, d);
				if (i<0) asd.digits.add(0, carry);
			}
			r = r.addition(asd);
			--j;
			i = digits.size() - 1;
			++c;
		}	
		while (r.digits.get(0) == 0 && r.digits.size() > 1) {
			r.digits.remove(0);
		}
		return r;
	}

	public int compareTo(BigInt other) throws Exception {
		int r = 0;
		if (neg && other.neg) {
			r = comparison(other) * -1;
		} else if (neg) {
			r = -1;
		} else if (other.neg) {
			r = 1;
		} else {
			r = comparison(other);
		}
		return r;
	}

	public BigInt add(BigInt other) throws Exception {
		BigInt r = new BigInt("0");
		r.digits.remove(0);
		
		if (neg && other.neg) {
			r = addition(other);
			sign = -1;
		} else if (neg && !other.neg) {
			if (comparison(other)==1) {
				return new BigInt(substraction(other).toString(), -1);
			} else if (comparison(other)==-1) {
				return new BigInt(other.substraction(this).toString(), 1);
			} else return new BigInt(substraction(other).toString(), -1);
		} else if (other.neg && !neg) {
			if (comparison(other)==1) {
				return new BigInt(substraction(other).toString(), 1);
			} else if (comparison(other)==-1) {
				return new BigInt(other.substraction(this).toString(), -1);
			} else return new BigInt(substraction(other).toString(), 1);
		}
		return r;
	}

	public BigInt multiply(BigInt other) throws Exception {
		BigInt r = new BigInt("0");
		r.digits.remove(0);
		
		if (neg && other.neg) sign = 1;
		else if (neg || other.neg) sign = -1;
		
		r = multiplication(other);
		return r;
	}

	public static void main(String[] args) throws Exception {
		Scanner scan = new Scanner(System.in);
		BigInt a = new BigInt(scan.next());
		BigInt b = new BigInt(scan.next());

		System.out.println(a.multiply(b));
	}
}
